[
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on my personal GitHub page: [https://github.com/chenglinhu-cmd/test]."
  },
  {
    "objectID": "analysis/Part1_osm data.html",
    "href": "analysis/Part1_osm data.html",
    "title": "MUSA 550 Quarto Template",
    "section": "",
    "text": "# Part 1 Analysising Commercial vitality of four squares in Philly\nimport altair as alt\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n\n# Show all columns in dataframes\npd.options.display.max_columns = 999\n\n\n# Hide warnings due to issue in shapely package \n# See: https://github.com/shapely/shapely/issues/1345\nnp.seterr(invalid=\"ignore\");\n\n\nimport osmnx as ox\n\n\n# Getting boundary from osm \n# which is a geodataframe\ncentercity = ox.geocode_to_gdf(\"center city, Philadelphia, PA\")\n\n\n# Project it to UTM using OSMnx's function and Preview boundary\nax = ox.project_gdf(centercity).plot(fc=\"none\", ec=\"black\")\n\n\n\n\n\n# Using polygon to download data\n# Squeeze dgf so we can get the geometry polygon\ncentercity_outline = centercity.squeeze().geometry\n\n\n# Downloading OSM features using \"features_from_\"\namenity = ox.features_from_polygon(centercity_outline, tags={\"amenity\": \"restaurant\"})\n\n\n# plot it\nfig, ax = plt.subplots(figsize=(10, 6))\nax = amenity.plot(ax=ax)\nax.set_axis_off()\n\n\n\n\n\nn = amenity.explore(tiles=\"cartodb dark matter\",\n    color=\"yellow\")\nn\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Downloading OSM street network using \"graph_from\"\n# specific network types\nG = ox.graph_from_polygon(centercity_outline, network_type=\"drive\")\n\n\n#project and plot it using OSMnx' \"project_graph\" and \"plot_graph\"\nG_projected = ox.project_graph(G)\nox.plot_graph(G_projected, node_size=0)\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n# converting a graph back to a geodataframe using OSMnx's function ox.graph_to_gdfs\ncc_edges = ox.graph_to_gdfs(G, edges=True, nodes=False)\n\n\n# use the `.explore()` function to get an interactive web map via Folium feed in a gdf\ncc_edges.explore(tiles=\"cartodb positron\")\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# define the study sites as label : query\nplaces = {\"Philadelphia\"  : \"Philadelphia, PA, USA\", \"Manhattan\" : \"Manhattan, NYC, NY, USA\",\"center city\" :\"center city, philadelphia, PA\"}\nplaces\n\n{'Philadelphia': 'Philadelphia, PA, USA',\n 'Manhattan': 'Manhattan, NYC, NY, USA',\n 'center city': 'center city, philadelphia, PA'}\n\n\n\n# get geocodes\ngdf = ox.geocode_to_gdf(list(places.values()))\ngdf\n\n\n\n\n\n\n\n\ngeometry\nbbox_north\nbbox_south\nbbox_east\nbbox_west\nplace_id\nosm_type\nosm_id\nlat\nlon\nclass\ntype\nplace_rank\nimportance\naddresstype\nname\ndisplay_name\n\n\n\n\n0\nPOLYGON ((-75.28030 39.97500, -75.28022 39.974...\n40.137959\n39.867005\n-74.955831\n-75.280298\n14128726\nrelation\n188022\n39.952724\n-75.163526\nboundary\nadministrative\n16\n0.713797\ncity\nPhiladelphia\nPhiladelphia, Pennsylvania, United States\n\n\n1\nMULTIPOLYGON (((-74.04721 40.69089, -74.04720 ...\n40.882012\n40.679654\n-73.906769\n-74.047207\n15473406\nrelation\n8398124\n40.789624\n-73.959894\nboundary\nadministrative\n14\n0.675439\nsuburb\nManhattan\nManhattan, New York County, New York, United S...\n\n\n2\nPOLYGON ((-75.18743 39.94656, -75.16546 39.943...\n39.965669\n39.940478\n-75.129683\n-75.187435\n1564737\nrelation\n13658130\n39.950950\n-75.157484\nboundary\nadministrative\n20\n0.416014\nsuburb\nCenter City\nCenter City, Philadelphia, Pennsylvania, Unite...\n\n\n\n\n\n\n\n\n# Create a street network orientations graph\nn = len(places)\nncols = int(np.ceil(np.sqrt(n)))\nnrows = int(np.ceil(n / ncols))\nfigsize = (ncols * 5, nrows * 5)\nfig, axes = plt.subplots(nrows, ncols, figsize=figsize, subplot_kw={\"projection\": \"polar\"})\n\n# plot each city's polar histogram\nfor ax, place in zip(axes.flat, sorted(places.keys())):\n    print(ox.utils.ts(), place)\n\n     # get undirected graphs with edge bearing attributes\n    G_ = ox.graph_from_place(place, network_type=\"drive\")\n    Gu = ox.add_edge_bearings(ox.get_undirected(G_))\n    fig, ax = ox.plot_orientation(Gu, ax=ax, title=place, area=True)\n    \n# add figure title and save image\nsuptitle_font = {\n    \"family\": \"DejaVu Sans\",\n    \"fontsize\": 60,\n    \"fontweight\": \"normal\",\n    \"y\": 1,\n}\nfig.suptitle(\"City Street Network Orientation\", **suptitle_font)\nfig.tight_layout()\nfig.subplots_adjust(hspace=0.35)\nfig.savefig(\"images/street-orientations.png\", facecolor=\"w\", dpi=100, bbox_inches=\"tight\")\nplt.close()\n\n2023-12-07 19:38:23 Manhattan\n2023-12-07 19:38:30 Philadelphia\n2023-12-07 19:39:07 center city\n\n\nC:\\Users\\83690\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\osmnx\\plot.py:795: UserWarning: The figure layout has changed to tight\n  fig.tight_layout()\nC:\\Users\\83690\\mambaforge\\envs\\musa-550-fall-2023\\lib\\site-packages\\osmnx\\plot.py:795: UserWarning: The figure layout has changed to tight\n  fig.tight_layout()\nC:\\Users\\83690\\AppData\\Local\\Temp\\ipykernel_14388\\3090275978.py:25: UserWarning: The figure layout has changed to tight\n  fig.tight_layout()\n\n\nFileNotFoundError: [Errno 2] No such file or directory: 'images/street-orientations.png'\n\n\n\n\n\n\n# get basic information of a graph project\nox.basic_stats(G)\n\n{'n': 939,\n 'm': 1761,\n 'k_avg': 3.7507987220447285,\n 'edge_length_total': 172590.69999999984,\n 'edge_length_avg': 98.00721181147067,\n 'streets_per_node_avg': 3.473908413205538,\n 'streets_per_node_counts': {0: 0, 1: 18, 2: 2, 3: 446, 4: 465, 5: 6, 6: 2},\n 'streets_per_node_proportions': {0: 0.0,\n  1: 0.019169329073482427,\n  2: 0.002129925452609159,\n  3: 0.4749733759318424,\n  4: 0.4952076677316294,\n  5: 0.006389776357827476,\n  6: 0.002129925452609159},\n 'intersection_count': 921,\n 'street_length_total': 157771.55099999986,\n 'street_segment_count': 1583,\n 'street_length_avg': 99.66617245735935,\n 'circuity_avg': 1.016528683676506,\n 'self_loop_proportion': 0.0}\n\n\n\n# get different feature from \"https://wiki.openstreetmap.org/wiki/Map_features\"\n# use a polygon or a place name to get feature within a certain area\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nphilly_tourism.head()\n\n\n\n\n\n\n\n\n\nref\ngeometry\nele\ngnis:county_id\ngnis:created\ngnis:feature_id\ngnis:state_id\nname\ntourism\nbrand\nbrand:wikidata\nbrand:wikipedia\noperator\nartwork_type\nhistoric\nsource\nwikidata\ninformation\nartist_name\nmaterial\nwebsite\naddr:state\ngnis:county_name\ngnis:reviewed\nfee\nopening_hours\namenity\nartwork_subject\nimage\nstart_date\nstatue\nsubject:wikidata\ncolour\nwheelchair\nwikipedia\naddr:city\nname:de\ndesignation\ndescription\nmuseum\noperator:type\nalt_name\nbarrier\nheritage\nheritage:operator\nheritage:website\nnrhp:criteria\nnrhp:inscription_date\nnrhp:nhl\nprotection_title\nref:nrhp\nsource_ref\nartist:wikidata\nheight\nname:fr\naddr:housenumber\naddr:postcode\naddr:street\nmemorial\nyear_of_construction\nname:ru\nlayer\nphone\ncheck_date\ncontact:email\nname:en\nboard_type\ntoilets:wheelchair\ninscription\nsubject:wikipedia\nlevel\nnatural\nattraction\nnote\ndisplay\nend_date\ncomment\nhistoric:amenity\ngarden:type\nleisure\npostal_code\nofficial_name\ninternet_access\nshort_name\nparking\nguest_house\ninscription:url\ngender\nbicycle\nhiking\ncovered\ndrinking_water\nopenfire\nemail\ninternet_access:fee\nrooms\naddr:unit\nmimics\nsource:url\ndirection\ndepartures_board\nmap_size\nmap_type\ndirection_east\ndirection_north\ndirection_west\ndirection_southeast\ndirection_southwest\ndirection_northeast\ndirection_northwest\ndirection_south\nfixme\nnodes\nbuilding\nbuilding:material\nname:hi\nbuilding:levels\ngnis:import_uuid\nroof:shape\nhighway\nincline\nstep_count\nbuilding:wikidata\nbuilding:wikipedia\ncheck_date:opening_hours\nold_name\nsmoking\nbuilding:colour\nair_conditioning\nfax\nstars\nroof:colour\naddr:country\ncontact:fax\ncontact:phone\nship:type\naddr:housename\nbar\ndisused:amenity\nroof:material\nabandoned:amenity\ninternet_access:ssid\ncontact:facebook\ncontact:instagram\nfee:conditional\nshop\nroof:levels\nname:zh\nartist:website\nbridge\nfoot\nhorse\nlit\nsac_scale\nsurface\ntrail_visibility\nwidth\nbridge:structure\nman_made\ndisused:website\nboundary\noperator:short\noperator:wikidata\nownership\nprotected\nbuilding:part\narea\nsubject\nways\ntype\nplace\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n357371322\nNaN\nPOINT (-75.19580 39.96970)\n17\n101\n08/23/2007\n2347097\n42\nBird Lake Picnic Area\npicnic_site\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n360500844\nNaN\nPOINT (-75.19582 39.95352)\nNaN\nNaN\nNaN\nNaN\nNaN\nHilton Inn at Penn\nhotel\nHilton\nQ598884\nen:Hilton Hotels & Resorts\nHilton\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n360515304\nNaN\nPOINT (-75.14860 39.94771)\nNaN\nNaN\nNaN\nNaN\nNaN\nRobert Morris\nartwork\nNaN\nNaN\nNaN\nNaN\nstatue\nmemorial\nsurvey\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n360542779\nNaN\nPOINT (-75.18932 39.95540)\nNaN\nNaN\nNaN\nNaN\nNaN\nMario the Magnificent\nartwork\nNaN\nNaN\nNaN\nNaN\nstatue\nNaN\nNaN\nQ98563440\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n360777728\nNaN\nPOINT (-75.19021 39.95230)\nNaN\nNaN\nNaN\nNaN\nNaN\nPennsylvania Historical Marker: ENIAC, first a...\ninformation\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nboard\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n# How to find the name of the POI: search for keywords\nphilly_tourism.loc[philly_tourism['name'].str.contains(\"Bolt of\", na=False)]\n\n\n\n\n\n\n\n\n\nref\ngeometry\nele\ngnis:county_id\ngnis:created\ngnis:feature_id\ngnis:state_id\nname\ntourism\nbrand\nbrand:wikidata\nbrand:wikipedia\noperator\nartwork_type\nhistoric\nsource\nwikidata\ninformation\nartist_name\nmaterial\nwebsite\naddr:state\ngnis:county_name\ngnis:reviewed\nfee\nopening_hours\namenity\nartwork_subject\nimage\nstart_date\nstatue\nsubject:wikidata\ncolour\nwheelchair\nwikipedia\naddr:city\nname:de\ndesignation\ndescription\nmuseum\noperator:type\nalt_name\nbarrier\nheritage\nheritage:operator\nheritage:website\nnrhp:criteria\nnrhp:inscription_date\nnrhp:nhl\nprotection_title\nref:nrhp\nsource_ref\nartist:wikidata\nheight\nname:fr\naddr:housenumber\naddr:postcode\naddr:street\nmemorial\nyear_of_construction\nname:ru\nlayer\nphone\ncheck_date\ncontact:email\nname:en\nboard_type\ntoilets:wheelchair\ninscription\nsubject:wikipedia\nlevel\nnatural\nattraction\nnote\ndisplay\nend_date\ncomment\nhistoric:amenity\ngarden:type\nleisure\npostal_code\nofficial_name\ninternet_access\nshort_name\nparking\nguest_house\ninscription:url\ngender\nbicycle\nhiking\ncovered\ndrinking_water\nopenfire\nemail\ninternet_access:fee\nrooms\naddr:unit\nmimics\nsource:url\ndirection\ndepartures_board\nmap_size\nmap_type\ndirection_east\ndirection_north\ndirection_west\ndirection_southeast\ndirection_southwest\ndirection_northeast\ndirection_northwest\ndirection_south\nfixme\nnodes\nbuilding\nbuilding:material\nname:hi\nbuilding:levels\ngnis:import_uuid\nroof:shape\nhighway\nincline\nstep_count\nbuilding:wikidata\nbuilding:wikipedia\ncheck_date:opening_hours\nold_name\nsmoking\nbuilding:colour\nair_conditioning\nfax\nstars\nroof:colour\naddr:country\ncontact:fax\ncontact:phone\nship:type\naddr:housename\nbar\ndisused:amenity\nroof:material\nabandoned:amenity\ninternet_access:ssid\ncontact:facebook\ncontact:instagram\nfee:conditional\nshop\nroof:levels\nname:zh\nartist:website\nbridge\nfoot\nhorse\nlit\nsac_scale\nsurface\ntrail_visibility\nwidth\nbridge:structure\nman_made\ndisused:website\nboundary\noperator:short\noperator:wikidata\nownership\nprotected\nbuilding:part\narea\nsubject\nways\ntype\nplace\n\n\nelement_type\nosmid\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode\n5723840036\nNaN\nPOINT (-75.14878 39.95546)\nNaN\nNaN\nNaN\nNaN\nNaN\nBolt of Lightning: A Memorial to Benjamin Fran...\nartwork\nNaN\nNaN\nNaN\nNaN\ninstallation\nNaN\nNaN\nNaN\nNaN\nIsamu Noguchi\nsteel\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1984\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nWashington_square = philly_tourism.query(\"name == 'AKA Washington Square'\").squeeze()\nWashington_square\n\nref                                          NaN\ngeometry          POINT (-75.1551778 39.9490697)\nele                                          NaN\ngnis:county_id                               NaN\ngnis:created                                 NaN\n                               ...              \narea                                         NaN\nsubject                                      NaN\nways                                         NaN\ntype                                         NaN\nplace                                        NaN\nName: (node, 4436638558), Length: 171, dtype: object\n\n\n\nRittenhouse_square = philly_tourism.query(\"name == 'AKA Rittenhouse Square'\").squeeze()\nRittenhouse_square\n\nref                                                             NaN\ngeometry          POLYGON ((-75.1704966 39.9505485, -75.1705679 ...\nele                                                             NaN\ngnis:county_id                                                  NaN\ngnis:created                                                    NaN\n                                        ...                        \narea                                                            NaN\nsubject                                                         NaN\nways                                                            NaN\ntype                                                            NaN\nplace                                                           NaN\nName: (way, 333316089), Length: 171, dtype: object\n\n\n\nFranklin_square = philly_tourism.query(\"name == 'Bolt of Lightning: A Memorial to Benjamin Franklin'\").squeeze()\nFranklin_square\n\nref                                         NaN\ngeometry          POINT (-75.1487812 39.955465)\nele                                         NaN\ngnis:county_id                              NaN\ngnis:created                                NaN\n                              ...              \narea                                        NaN\nsubject                                     NaN\nways                                        NaN\ntype                                        NaN\nplace                                       NaN\nName: (node, 5723840036), Length: 171, dtype: object\n\n\n\nRittenhouse_square_x = Rittenhouse_square.geometry.centroid.x\nRittenhouse_square_y = Rittenhouse_square.geometry.centroid.y\n\n\nWashington_square_x = Washington_square.geometry.x\nWashington_square_y = Washington_square.geometry.y\n\n\nFranklin_square_x = Franklin_square.geometry.x\nFranklin_square_y = Franklin_square.geometry.y\n\n\n# get shortest path\norig_node = ox.nearest_nodes(G, Rittenhouse_square_x, Rittenhouse_square_y )\ndest_node = ox.nearest_nodes(G, Washington_square_x, Washington_square_y )\nroute1 = ox.shortest_path(G, orig_node, dest_node, weight=\"length\")\n# visualizae\nox.plot_graph_route(G, route1, node_size=0)\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n# get shortest path\norig_node = ox.nearest_nodes(G, Washington_square_x, Washington_square_y )\ndest_node = ox.nearest_nodes(G, Franklin_square_x, Franklin_square_y )\nroute2 = ox.shortest_path(G, orig_node, dest_node, weight=\"length\")\n# visualizae\nox.plot_graph_route(G, route2, node_size=0)\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\nm = ox.utils_graph.route_to_gdf(G, route1, weight=\"length\").explore(\n    tiles=\"cartodb dark matter\",\n    color=\"red\",\n)\n\nm = ox.utils_graph.route_to_gdf(G, route2, weight=\"length\").explore(\n    tiles=\"cartodb dark matter\",\n    color=\"yellow\",\n    m=m\n)\n\nm = amenity.explore(tiles=\"cartodb dark matter\",\n    color=\"blue\", m=m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n################## Pandana network analysis tool ##########################\nimport pandana as pnda\nfrom pandana.loaders import osm\n\n\n# first we need a boundary there are a few given by teacher\nplanning_districts = gpd.read_file(\n    \"https://opendata.arcgis.com/datasets/0960ea0f38f44146bb562f2b212075aa_0.geojson\"\n)\n\n\ncentral_district = planning_districts.query(\"DIST_NAME == 'Central'\")\n\n\ncentral_district\n\n\n\n\n\n\n\n\nOBJECTID_1\nOBJECTID\nDIST_NAME\nABBREV\nShape__Area\nShape__Length\nPlanningDist\nDaytimePop\ngeometry\n\n\n\n\n3\n4\n9\nCentral\nCTR\n1.782880e+08\n71405.14345\nNaN\nNaN\nPOLYGON ((-75.14791 39.96733, -75.14715 39.967...\n\n\n\n\n\n\n\n\ncenter_city_outline = central_district.squeeze().geometry\n\ncenter_city_outline\n\n\n\n\n\nboundary = center_city_outline.bounds\nboundary\n\n(-75.193582452986, 39.9286257450627, -75.1259307965391, 39.9738724134056)\n\n\n\n[lng_min, lat_min, lng_max, lat_max] = boundary\n\n\npoi_df = osm.node_query(lat_min, lng_min, lat_max, lng_max)\npoi_df = poi_df.dropna(subset=[\"amenity\"])\n\n\n###### create a chart analysising the number of each types of poi\nchart = (\n    alt.Chart(poi_df)\n    .mark_bar()\n    .encode(y=alt.Y(\"amenity\", sort=\"-x\"), x=\"count()\", tooltip=[\"amenity\", \"count()\"])\n)\n\nchart\n\n\nnet = osm.pdna_network_from_bbox(\n    lat_min, lng_min, lat_max, lng_max, network_type=\"walk\"\n)\n\nRequesting network data within bounding box from Overpass API in 1 request(s)\nPosting to http://www.overpass-api.de/api/interpreter with timeout=180, \"{'data': '[out:json][timeout:180];(way[\"highway\"][\"highway\"!~\"motor|proposed|construction|abandoned|platform|raceway\"][\"foot\"!~\"no\"][\"pedestrians\"!~\"no\"](39.92862575,-75.19358245,39.97387241,-75.12593080);&gt;;);out;'}\"\nDownloaded 7,699.1KB from www.overpass-api.de in 1.04 seconds\nDownloaded OSM network data within bounding box from Overpass API in 1 request(s) and 1.14 seconds\nReturning OSM data with 40,063 nodes and 12,633 ways...\nEdge node pairs completed. Took 5.95 seconds\nReturning processed graph with 18,558 nodes and 27,908 edges...\nCompleted OSM data download and Pandana node and edge table creation in 7.68 seconds\n\n\n\n# sensible defaults\nmax_distance = 2000  # in meters\nnum_pois = 10  # only need the 10 nearest POI to each point in the network\n\n## I can explore different amenity within this wbsite \"https://wiki.openstreetmap.org/wiki/Map_features#Amenity\"\nAMENITIES = [\"restaurant\", \"pub\", \"bar\", \"cafe\"]\nfor amenity in AMENITIES:\n    # get the subset of amenities for this type\n    pois_subset = poi_df[poi_df[\"amenity\"] == amenity]\n\n    # set the POI, using the longitude and latitude of POI\n    net.set_pois(\n        amenity, max_distance, num_pois, pois_subset[\"lon\"], pois_subset[\"lat\"]\n    )\n\n\n# keyword arguments to pass for the matplotlib figure\nbbox_aspect_ratio = (lat_max - lat_min) / (lng_max - lng_min)\nfig_kwargs = {\"facecolor\": \"w\", \"figsize\": (10, 10 * bbox_aspect_ratio)}\n\n# keyword arguments to pass for scatter plots\nplot_kwargs = {\"s\": 20, \"alpha\": 0.9, \"cmap\": \"viridis_r\", \"edgecolor\": \"none\"}\n\n\n## plot the walking distance to the nearest POI\n# First calculate it\namenity = \"bar\"\naccess = net.nearest_pois(distance=2000, category=amenity, num_pois=num_pois)\n\n\n# Merge the nodes and the distance to POIs\nnodes = pd.merge(net.nodes_df, access, left_index=True, right_index=True)\n\n# Make into a geodataframe\nnodes = gpd.GeoDataFrame(\n    nodes, geometry=gpd.points_from_xy(nodes[\"x\"], nodes[\"y\"]), crs=\"EPSG:4326\"\n)\n\n\n## Then plot it\ndef plot_walking_distance(net, amenity, distance=1000, n=1):\n    \"\"\"\n    Plot the walking distance to the specified amenity\n    \"\"\"\n    from mpl_toolkits.axes_grid1 import make_axes_locatable\n\n    # subset of POI\n    poi_subset = poi_df[poi_df[\"amenity\"] == amenity]\n\n    # get the distances to nearest num_pois POI\n    access = net.nearest_pois(distance=1000, category=amenity, num_pois=num_pois)\n\n    # merge node positions and distances to nearest PO\n    nodes = pd.merge(net.nodes_df, access, left_index=True, right_index=True)\n    nodes = gpd.GeoDataFrame(\n        nodes, geometry=gpd.points_from_xy(nodes[\"x\"], nodes[\"y\"]), crs=\"EPSG:4326\"\n    )\n\n    # Create the figure\n    fig, ax = plt.subplots(figsize=(10, 10))\n    divider = make_axes_locatable(ax)\n    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\n\n    # plot the distance to the nth nearest amenity\n    ax = nodes.plot(ax=ax, cax=cax, column=nodes[n], legend=True, **plot_kwargs)\n\n    #### add the amenities as stars\n    #for i, row in poi_subset.iterrows():\n        #ax.scatter(row[\"lon\"], row[\"lat\"], color=\"red\", s=100, marker=\"*\")\n\n    # format\n    ax.set_facecolor(\"black\")\n    ax.figure.set_size_inches(fig_kwargs[\"figsize\"])\n\n    # set extent\n    [xmin, ymin, xmax, ymax] = nodes.geometry.total_bounds\n    ax.set_xlim(xmin, xmax)\n    ax.set_ylim(ymin, ymax)\n\n    return ax\n\n\n# specific use which one\n# wakling distance to the n=? th nearest \"???s\"\nax = plot_walking_distance(net, \"bar\", n=1)\nax.set_title(\"Walking distance to the nearest bar\", fontsize=18)\n\nText(0.5, 1.0, 'Walking distance to the nearest bar')\n\n\n\n\n\n\nax = plot_walking_distance(net, \"restaurant\", n=1)\nax.set_title(\"Walking distance to the nearest restaurant\", fontsize=18)\n\nText(0.5, 1.0, 'Walking distance to the nearest restaurant')\n\n\n\n\n\n\nax = plot_walking_distance(net, \"pub\", n=1)\nax.set_title(\"Walking distance to the nearest pub\", fontsize=18)\n\nText(0.5, 1.0, 'Walking distance to the nearest pub')\n\n\n\n\n\n\nax = plot_walking_distance(net, \"cafe\", n=1)\nax.set_title(\"Walking distance to the nearest cafe\", fontsize=18)\n\nText(0.5, 1.0, 'Walking distance to the nearest cafe')"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "My name is Colin Hu, the student of the course.\nThis site is for illustrating my final project for [MUSA 550] (https://musa-550-fall-2023.github.io/), during fall 2023."
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section entails my ongoing research, comparing four historical squares in Philadelphia: Logan, Franklin, Rittenhouse, and Washington (originally, including another square, Center Square, where City Hall and Dilworth Park are now situated). These squares serve as a testament to Philadelphia’s rich history and stand as integral features within Center City.\nRegrettably, the construction of the Vine Expressway has notably impacted two of these squares—Logan and Franklin—resulting in decreased vitality. The expressway’s pass by these squares, significantly affecting their connectivity and overall function.\nIn my final research, I aim to visually depict the adverse effects of the Vine Expressway on these two squares, particularly in terms of commercial vitality and green coverage.\nThe research is structured into two primary segments. The first part involves a comparison of the four squares using OpenStreetMap (OSM) data. The second part centers on analyzing Normalized Difference Vegetation Index (NDVI) data. These segments have been slightly modified based on the Week 5 lesson plans.Regarding the OSM component, I have utilized amenity data from OSM, focusing on restaurants and cafes, to create visual representations.For the NDVI analysis, my emphasis has been on comparing the NDVI values of the four squares."
  },
  {
    "objectID": "analysis/Part2_NDVI data.html",
    "href": "analysis/Part2_NDVI data.html",
    "title": "MUSA 550 Quarto Template",
    "section": "",
    "text": "# Our usual imports\nimport altair as alt\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n\n# This will add the .hvplot() function to your DataFrame!\n# Import holoviews too\nimport holoviews as hv\nimport hvplot.pandas\n\nhv.extension(\"bokeh\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport rasterio as rio\n\n\n# Open the file and get a file \"handle\"\nlandsat = rio.open(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-5/main/data/landsat8_philly.tif\")\nlandsat\n\n&lt;open DatasetReader name='https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-5/main/data/landsat8_philly.tif' mode='r'&gt;\n\n\n\ndata = landsat.read(1)\n\ndata\n\narray([[10901, 10618, 10751, ..., 12145, 11540, 14954],\n       [11602, 10718, 10546, ..., 11872, 11982, 12888],\n       [10975, 10384, 10357, ..., 11544, 12318, 12456],\n       ...,\n       [12281, 12117, 12072, ..., 11412, 11724, 11088],\n       [12747, 11866, 11587, ..., 11558, 12028, 10605],\n       [11791, 11677, 10656, ..., 10615, 11557, 11137]], dtype=uint16)\n\n\n\nfig, ax = plt.subplots(figsize=(10, 10))\n\nimg = ax.imshow(data)\n\nplt.colorbar(img)\n\n&lt;matplotlib.colorbar.Colorbar at 0x1b2cd5338b0&gt;\n\n\n\n\n\n\nimport matplotlib.colors as mcolors\n\n\n# Initialize\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the image\nimg = ax.imshow(\n    data,\n    # Use a log colorbar scale\n    norm=mcolors.LogNorm(),\n    # Set the extent of the images\n    extent=[\n        landsat.bounds.left,\n        landsat.bounds.right,\n        landsat.bounds.bottom,\n        landsat.bounds.top,\n    ],\n)\n\n# Add a colorbar\nplt.colorbar(img);\n\n\n\n\n\ncity_limits = gpd.read_file(\"./data/City_Limits.geojson\")\n\n\n# Convert to the correct CRS!\nprint(landsat.crs.data)\n\n{'init': 'epsg:32618'}\n\n\n\ncity_limits = city_limits.to_crs(landsat.crs.data[\"init\"])\n\n\n# Initialize\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# The extent of the data\nlandsat_extent = [\n    landsat.bounds.left,\n    landsat.bounds.right,\n    landsat.bounds.bottom,\n    landsat.bounds.top,\n]\n\n# Plot!\nimg = ax.imshow(data, norm=mcolors.LogNorm(), extent=landsat_extent)  # NEW  # NEW\n\n# Add the Square limits\ncity_limits.plot(ax=ax, facecolor=\"none\", edgecolor=\"white\")\n\n# Add a colorbar and turn off axis lines\nplt.colorbar(img)\nax.set_axis_off()\n\n\n\n\n\nfrom rasterio.mask import mask\n\n\nlandsat\n\n&lt;open DatasetReader name='./data/landsat8_philly.tif' mode='r'&gt;\n\n\n\nmasked, mask_transform = mask(\n    dataset=landsat,              # The original raster data\n    shapes=city_limits.geometry,  # The vector geometry we want to crop by\n    crop=True,                    # Optional: remove pixels not within boundary\n    all_touched=True,             # Optional: get all pixels that touch the boudnary\n    filled=False,                 # Optional: do not fill cropped pixels with a default value\n)\n\n\nmasked.shape\n\n(10, 999, 923)\n\n\n\n# Initialize\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the first band\nax.imshow(masked[0], cmap=\"viridis\", extent=landsat_extent)\n\n# Format and add the city limits\ncity_limits.boundary.plot(ax=ax, color=\"gray\", linewidth=4)\nax.set_axis_off()\n\n\n\n\n\n# Note that the indexing here is zero-based, e.g., band 1 is index 0\nred = masked[3]\nnir = masked[4]\n\n\ndef calculate_NDVI(nir, red):\n    \"\"\"\n    Calculate the NDVI from the NIR and red landsat bands\n    \"\"\"\n\n    # Convert to floats\n    nir = nir.astype(float)\n    red = red.astype(float)\n\n    # Get valid entries\n    check = np.logical_and(red.mask == False, nir.mask == False)\n\n    # Where the check is True, return the NDVI, else return NaN\n    ndvi = np.where(check, (nir - red) / (nir + red), np.nan)\n    \n    # Return\n    return ndvi\n\n\nNDVI = calculate_NDVI(nir, red)\n\n\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot NDVI\nimg = ax.imshow(NDVI, extent=landsat_extent)\n\n# Format and plot city limits\ncity_limits.plot(ax=ax, edgecolor=\"gray\", facecolor=\"none\", linewidth=4)\nplt.colorbar(img)\nax.set_axis_off()\nax.set_title(\"NDVI in Philadelphia\", fontsize=18)\n\nText(0.5, 1.0, 'NDVI in Philadelphia')\n\n\n\n\n\n\n# Read in the parks dataset\nsquares = gpd.read_file(\"./data/square.geojson\")\n\n\n# Print out the CRS\nsquares.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\nlandsat.crs\n\nCRS.from_epsg(32618)\n\n\n\nlandsat.crs.data[\"init\"]\n\n'epsg:32618'\n\n\n\n# Convert to landsat CRS\nsquares = squares.to_crs(landsat.crs.data[\"init\"])\n\n\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot NDVI\nimg = ax.imshow(NDVI, extent=landsat_extent)\n\n# Add the city limits\ncity_limits.plot(ax=ax, edgecolor=\"gray\", facecolor=\"none\", linewidth=4)\n\n# NEW: add the parks\nsquares.plot(ax=ax, edgecolor=\"crimson\", facecolor=\"none\", linewidth=2)\n\n# Format and add colorbar\nplt.colorbar(img)\nax.set_axis_off()\nax.set_title(\"NDVI vs. Parks in Philadelphia\", fontsize=18);\n\n\n\n\n\nfrom rasterstats import zonal_stats\n\n\nstats = zonal_stats(\n    squares,  # The vector data\n    NDVI,  # The array holding the raster data\n    affine=landsat.transform,  # The affine transform for the raster data\n    stats=[\"mean\", \"median\"],  # The stats to compute\n    nodata=np.nan,  # Missing data representation\n)\n\n\nmedian_stats = [s[\"median\"] for s in stats]\n\n\nsquares[\"median_NDVI\"] = median_stats\n\n\nsquares.head()\n\n\n\n\n\n\n\n\nOBJECTID\nShape_Length\nShape_Area\nName\ngeometry\nmedian_NDVI\n\n\n\n\n0\n1\n988.563775\n60976.353043\nFranklin Square\nPOLYGON ((487077.010 4422949.922, 487046.563 4...\n0.302782\n\n\n1\n2\n950.355597\n56422.312587\nWashington Square\nPOLYGON ((486912.866 4421997.104, 486885.592 4...\n0.418753\n\n\n2\n3\n1180.863654\n82846.668242\nLogan Square\nPOLYGON ((485305.809 4423224.747, 485275.346 4...\n0.193237\n\n\n3\n4\n928.959151\n53917.150666\nRittenhouse Square\nPOLYGON ((485418.065 4422235.931, 485243.707 4...\n0.452164\n\n\n\n\n\n\n\n\n# Initialize\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Plot the city limits\ncity_limits.plot(ax=ax, edgecolor=\"black\", facecolor=\"none\", linewidth=0.2)\n\n# Plot the median NDVI\nsquares.plot(column=\"median_NDVI\", legend=True, ax=ax, cmap=\"viridis\")\n\n# Format\nax.set_axis_off()\n\n\n\n\n\n# trim to only the columns we want to plot\ncols = [\"median_NDVI\", \"Name\", \"geometry\"]\n\n# Plot the parks colored by median NDVI\np = squares[cols].hvplot.polygons(\n    c=\"median_NDVI\", geo=True, crs=32618, cmap=\"viridis\", hover_cols=[\"Name\"]\n)\n\n# Plot the city limit boundary\ncl = city_limits.hvplot.polygons(\n    geo=True,\n    crs=32618,\n    alpha=0,\n    line_alpha=1,\n    line_color=\"black\",\n    hover=False,\n    width=700,\n    height=600,\n)\n\n# combine!\ncl * p"
  }
]